// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maximumLength,length;
    field Array content;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength<0){
            do Sys.error(14);
        }
        if (maxLength<1){
            let maxLength=1;
        }
        let content = Array.new(maxLength);
        let maximumLength = maxLength;
        let length=0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(content);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j<length)){
            do Sys.error(15);
        }
        return content[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j<length)){
            do Sys.error(16);
        }
        let content[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length<maximumLength){
            let content[length]=c;
            let length = length +1;
        }else{
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length -1;
        if (length<0){
            let length =0;
            do Sys.error(18);
        }
        let content[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int res,i,sign;
        let sign=1;
        let res=0;
        let i=0;
        if (content[0]=45){
            let sign=-1;
            let i =1;
        }
        while (i<length){
            if ((content[i]>47)&(content[i]<58)){
                let res = (res*10) + (content[i]-48);
            }else{
                //TODO someError, also hier sollte eig ein Fehler hin aber den gibt es wohl nicht...
            }
            let i = i+1;
        }
        return sign*res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (maximumLength<6){
            do Sys.error(19);
        }
        if (val<0){
            let val = -val;
            do appendChar(45);
        }
        do setIntHelper(val);
        return;
    }
    method void setIntHelper(int val){
        var char c;
        var int i;
        let c = 48 +(val - ((val/10)*10));
        if (~(val < 10)){
            do setIntHelper(val/10);
        }
        do appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
