// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int res;
        let res = x;
        if (x<0){
            let res =-x;
        }
        return res;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i,res,mask;
        let i=0;
        let res=0;
        let mask =1;
        while(i<16){
            if ((mask & x)>0){
                let res = res + y;
            }
            let y = y+y;
            let mask = mask+mask;
            let i = i+1;
        }
        
        return res;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, res, sign;

        if (y=0){
            do Sys.error(3);
        }

        let sign = 1;
        if (x<0){
            let sign = -sign;
            let x = -x;
        }
        if((y<0)){
            let sign= -sign;
            let y= -y;
        }
        let res = 0;
        if (y>x|(y<0)){
            let res = 0;
        }else {
            let q = x/(y+y);
            if ((x-(2*q*y))<y){
                let res = q+q;
            }else{
                let res = q+q+1;
            }
        }
        return res*sign;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,i;
        var boolen done;
        
        if(x<0){
            do Sys.error(4);
        }

        let y = 0;
        let i = 16384;
        let done = false;
        while(~done){
            if (i=0){
                let done = true;
            }
            if ((~(((y+i)*(y+i))>x))&(((y+i)*(y+i))>0)){ //(y+i)^2 <= x and (y+i)^2>0 
                let y= y+i;
            }

            let i= i/2;
        }
        
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int res;
        let res = b;
        if (a>b){
            let res = a;
        }
        return res;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int res;
        let res = b;
        if (a<b){
            let res = a;
        }
        return res;
    }
}
